@model backend.Models.ResetPasswordModel

@*@{
    ViewData["Title"] = "ResetPassword";
}*@

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password</title>

    <style>
        body {
            margin: 15px;
        }
        .form-group {
            display: flex;
            flex-direction: column;
            margin-bottom: 20px;
            width: 250px;
        }
        .form-control {
            padding: 5px;
        }
    </style>

    <script>
        window.onload = function() {
            const passwordInput = document.getElementById("password");
            const confirmInput = document.getElementById("confirm");

            function checkMatch() {
                if (confirmInput.value != "") {

                    if (confirmInput.value != passwordInput.value) {
                        confirmInput.setCustomValidity("The new password and confirmation password do not match.");
                        confirmInput.reportValidity();
                    }

                    confirmInput.addEventListener("input", (event) => {
                        if (confirmInput.value != passwordInput.value) {
                            confirmInput.setCustomValidity("The new password and confirmation password do not match.");
                        } else {
                            confirmInput.setCustomValidity("");
                        }
                        confirmInput.reportValidity();
                    });

                    passwordInput.addEventListener("input", (event) => {
                        if (confirmInput.value != passwordInput.value) {
                            passwordInput.setCustomValidity("The new password and confirmation password do not match.");
                        } else {
                            passwordInput.setCustomValidity("");
                        }
                        passwordInput.reportValidity();
                    });

                    confirmInput.removeEventListener("mouseleave", checkMatch);
                }
            }

            confirmInput.addEventListener("mouseleave", checkMatch);
        }
    </script>
</head>

<body>
    <h1>Reset Password</h1>

    @using (Html.BeginForm("ResetPasswordPost", "Authentication", FormMethod.Post))
    {
        <div class="form-group">
            <label for="password">Password</label>
            @Html.PasswordFor(model => model.Password, new { @id="password", @class="form-control", @minlength="6", @maxlength="25", @required="true" })
        </div>
        <div class="form-group">
            <label for="confirm">Confirm Password</label>
            @Html.PasswordFor(model => model.ConfirmPassword, new { @id="confirm", @class="form-control", @minlength="6", @maxlength="25", @required="true" })
        </div>

        @Html.TextBoxFor(model => model.Email, new { @type = "hidden" })
        @Html.TextBoxFor(model => model.Token, new { @type = "hidden" })
        @Html.TextBoxFor(model => model.TokenExpirationTime, new { @type = "hidden" })

        <button type="submit" id="submit-button">Submit</button>
    }
</body>

</html>